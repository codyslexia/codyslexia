schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

input CreateProjectInput
  @join__type(graph: PROJECTS)
{
  """The id of the user who owns this project"""
  userId: String!

  """The name of the project"""
  name: String

  """The description of the project"""
  description: String

  """The kind of project this is"""
  kind: ProjectKind!

  """The environment this project is running in"""
  environment: ProjectEnvironment
}

scalar join__FieldSet

enum join__Graph {
  PROJECTS @join__graph(name: "projects", url: "http://localhost:4002/")
  USERS @join__graph(name: "users", url: "http://localhost:4001/")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Mutation
  @join__type(graph: PROJECTS)
  @join__type(graph: USERS)
{
  """Create a new project"""
  createProject(input: CreateProjectInput): Project @join__field(graph: PROJECTS)

  """Login as a user"""
  login(email: String, password: String): User @join__field(graph: USERS)

  """Create a new user"""
  createUser(email: String, password: String): User @join__field(graph: USERS)
}

type Project
  @join__type(graph: PROJECTS, key: "id")
{
  id: ID!

  """The id of the user who owns this project"""
  userId: ID!

  """The name of the project"""
  name: String

  """The description of the project"""
  description: String

  """The kind of project this is"""
  kind: ProjectKind

  """The environment this project is running in"""
  environment: ProjectEnvironment

  """The user who owns this project"""
  user: User

  """The date this project was created"""
  createdAt: String

  """The date this project was last updated"""
  updatedAt: String
}

enum ProjectEnvironment
  @join__type(graph: PROJECTS)
{
  """A project that is in development"""
  DEVELOPMENT @join__enumValue(graph: PROJECTS)

  """A project that is in staging"""
  STAGING @join__enumValue(graph: PROJECTS)

  """A project that is in production"""
  PRODUCTION @join__enumValue(graph: PROJECTS)
}

enum ProjectKind
  @join__type(graph: PROJECTS)
{
  """A project that is a website"""
  WEB @join__enumValue(graph: PROJECTS)

  """A project that is a mobile app"""
  MOBILE @join__enumValue(graph: PROJECTS)

  """A project that is a desktop app"""
  API @join__enumValue(graph: PROJECTS)
}

type Query
  @join__type(graph: PROJECTS)
  @join__type(graph: USERS)
{
  """Get a project by its id"""
  project(id: ID!): Project @join__field(graph: PROJECTS)

  """The full list of projects available to the current user"""
  projects: [Project] @join__field(graph: PROJECTS)

  """Get the currently logged in user"""
  me: User @join__field(graph: USERS)

  """Get all users (admin only)"""
  users: [User] @join__field(graph: USERS)

  """Get a user by ID"""
  user(id: ID!): User @join__field(graph: USERS)
}

type User
  @join__type(graph: PROJECTS, key: "id", extension: true)
  @join__type(graph: USERS, key: "id")
{
  id: ID!

  """The projects this user owns"""
  projects: [Project!]! @join__field(graph: PROJECTS)

  """The user's email address"""
  email: String @join__field(graph: USERS)
}